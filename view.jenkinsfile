JENKINS_API_TOKEN="chetangaikar:11b7b83bc28269ac2920997f8cf367ff3b"
JENKINS_VIEW_BASE_URL="http://35.173.230.44:8080/view/Avaloq/job/Product/job/WB/job/WB3.0/view/"
JENKINS_BASE_URL="http://35.173.230.44:8080/job/Product/job/WB/job/WB3.0/"
JENKINS_JOB_BASE_URL=JENKINS_BASE_URL+"job/"
//BRANCH="release/4.1.x"
//HOST="c0d00434"

timestamps {
  node {
    try {
      stage('Verify values before proceeding') {
				cleanWs()
        verifyValues()
			}
      stage('Update View in Jenkins') {
        cleanWs()
        updateViewInJenkins()
      }
      stage('Create Front Platform ADAI Release Job in Jenkins') {
				cleanWs()
				createJobInJenkins("adaiRelease")
			}
      stage('Create ADAI Clone Job in Jenkins') {
				cleanWs()
				createJobInJenkins("adaiClone")
			}
      stage('Create ADAI Clone Job in Jenkins') {
				cleanWs()
				createJobInJenkins("buildSnapshot")
			}
      stage('Create ADAI Clone Job in Jenkins') {
				cleanWs()
				createJobInJenkins("ocDeploy")
			}
    } catch (error) {
        echo "Caught Exception: ${error}"
	    currentBuild.result = 'FAILURE'
      } finally {
	    stage('Cleanup') {
	        cleanWs()
        }
    }
  }
}

def verifyValues() {
  println "Checking for the empty parameters."
  ((params.BRANCH.isEmpty() || !params.BRANCH.contains("/")) && (params.HOST.isEmpty())) ? returnExitStatus(3) : true

  println "Checking if ${getJobName("adaiRelease")} Jobs exist; otherwise EXITING if it does."
  (checkIfJobExistInJenkins("adaiRelease")) ? returnExitStatus(2) : true
		cleanWs()
  println "Checking if ${getJobName("adaiClone")} Jobs exist; otherwise EXITING if it does."
	(checkIfJobExistInJenkins("adaiClone")) ? returnExitStatus(2) : true
		cleanWs()
  println "Checking if ${getJobName("buildSnapshot")} Jobs exist; otherwise EXITING if it does."
	(checkIfJobExistInJenkins("buildSnapshot")) ? returnExitStatus(2) : true
		cleanWs()
  println "Checking if ${getJobName("ocDeploy")} Jobs exist; otherwise EXITING if it does."
  (checkIfJobExistInJenkins("ocDeploy")) ? returnExitStatus(2) : true
		cleanWs()
  println "Checking if avaloq-wb-constellation-release view exists and EXITING if it does not."
	(!checkIfViewExistInJenkins()) ? returnExitStatus(1) : true
  cleanWs()
}

def checkIfViewExistInJenkins(){
	configXML = sh(script: "curl -X GET \"${JENKINS_VIEW_BASE_URL}${getViewName()}/config.xml\" -u ${JENKINS_API_TOKEN}", returnStdout: true)
	return (configXML.contains("404 Not Found")) ? false : true
}

String getViewName(){
	string branch_type = "${BRANCH}".split("/")[0]
	if(branch_type.contains("release"))
		viewName = "avaloq-wb-constellation-release"
  else if(branch_type.contains("develop"))
    viewName = "avaloq-wb-constellation-develop"
	return viewName
}

def generateConfigXML(String job_type){
  string branch_type = "${BRANCH}".split("/")[0]
  string release_no = "${BRANCH}".split("/")[1]
	sh """
		git clone https://github.com/chetangaikar-ravetech/jenkinsfiles.git
		cd jenkinsfiles
		cd src/job-templates
		sed -i -r \
			-e "s|%BRANCH_TYPE%|${branch_type}|g" \
			-e "s|%RELEASE_NO%|${release_no}|g" \
			-e "s|%HOST%|${HOST}|g" \
			${job_type}-job-template.xml
	"""
}

def updateViewInJenkins(){
	println "Updating ${getViewName()} View in Jenkins..."
  generateConfigXML("view")
	sh """
		curl -X GET "${JENKINS_VIEW_BASE_URL}${getViewName()}/config.xml" -u ${JENKINS_API_TOKEN} -o viewconfig.xml
		sed -i -e '/<sections>/ r jenkinsfiles/src/job-templates/view-job-template.xml' viewconfig.xml
		curl -X POST "${JENKINS_VIEW_BASE_URL}${getViewName()}/config.xml" -u ${JENKINS_API_TOKEN} --data-binary "@viewconfig.xml" -H "Content-Type:application/xml" > result.xml
		if grep -q "A problem occurred while processing the request" result.xml; then echo "ERROR: Failed to update the View..."; exit 5; fi
	"""
	}


def checkIfJobExistInJenkins(String job_type){
	println "Checking if Job exists..."
	configXML = sh(script: "curl -X GET \"${JENKINS_JOB_BASE_URL}${getJobName(job_type)}/config.xml\" -u ${JENKINS_API_TOKEN}", returnStdout: true)
	return (configXML.contains("404 Not Found")) ? false : true
}

def createJobInJenkins(String job_type){
	println "Creating ${getJobName(job_type)} Jenkins job..."
	generateConfigXML(job_type)
	postXML = sh(script: "curl -X GET \"${JENKINS_BASE_URL}createItem?name=${getJobName(job_type)}\" -u ${JENKINS_API_TOKEN} --data-binary \"@jenkinsfiles/src/job-templates/${job_type}-job-template.xml\" -H \"Content-Type:application/xml\" ", returnStdout: true)
	if(postXML.contains("No Content-Type header set")){ println "ERROR: Creating of Jenkins job failed..."; sh "exit 4"}
}

def getJobName(String job_type){
  string branch_type = "${BRANCH}".split("/")[0]
  string release_no = "${BRANCH}".split("/")[1]
	switch(job_type){
		case "adaiRelease":
			return "avaloq-product-wb-front-platform-adai-"+"${branch_type}"+"-"+"${release_no}"+"-deploy"
		case "adaiClone":
			return "avaloq-wb-constellation-"+"${branch_type}"+"-"+"${release_no}"+"-adai-clone"
		case "buildSnapshot":
			return "avaloq-wb-constellation-"+"${branch_type}"+"-"+"${release_no}"+"-build-snapshot"
    case "ocDeploy":
      return "avaloq-wb-constellation-"+"${branch_type}"+"-"+"${release_no}"+"-oc-deploy"
	}
}


def returnExitStatus(exitStatus){
	switch(exitStatus) {
		case 1:
			println "ERROR: View in Jenkins does not exist. Please create a view manually first..."
			break
		case 2:
			println "ERROR: Job in Jenkins already exists. Please use another name..."
			break
		case 3:
			println "ERROR: Variable undefined or invalid. Please enter all mandatory fields correctly..."
			break
	}
	sh "exit ${exitStatus}"
}
